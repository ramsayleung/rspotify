on:
  pull_request:
  push:
    branches: master

name: Continuous Integration

jobs:
  formatting:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Cross compilation is only needed for the main client and not the entire
  # workspace.
  cross-compile:
    name: Cross Compile
    runs-on: ubuntu-latest
    env:
      CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
      CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabihf
          - armv7-unknown-linux-gnueabihf
        client:
          - client-ureq,ureq-rustls-tls
          - client-reqwest,reqwest-rustls-tls
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install gcc for armhf
        run: sudo apt-get update && sudo apt-get install gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --target ${{ matrix.target }} --no-default-features --features=cli,env-file,${{ matrix.client }}

  test-client:
    name: Test and Lint for each Client
    runs-on: ubuntu-latest
    strategy:
      matrix:
        client:
          - client-ureq,ureq-rustls-tls
          - client-reqwest,reqwest-rustls-tls
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --no-default-features --features=cli,env-file,${{ matrix.client }} -- -D warnings

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features=env-file,${{ matrix.client }}

  # The rest of the crates don't need to be tested with multiple feature
  # combinations.
  test-crates:
    name: Simple Tests for Crates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p rspotify-macros -p rspotify-model -p rspotify-http
